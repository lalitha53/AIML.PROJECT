# -*- coding: utf-8 -*-
"""AIML Project

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1aD7Yo9JjStzMApe16n9B-bJxrd_KRZBo
"""

import pandas as pd
d=pd.read_csv('/content/drive/MyDrive/Heart_Disease_Predictionn.csv')
print(d)

from matplotlib import pyplot as pt

x=d['Age']
y=d['Heart Disease']
pt.plot(x,y)

x=d['Sex']
y=d['Heart Disease']
pt.plot(x,y)

x=d['Chest pain type']
y=d['Heart Disease']
pt.plot(x,y)

x=d['BP']
y=d['Heart Disease']
pt.plot(x,y)

x=d['Cholesterol']
y=d['Heart Disease']
pt.plot(x,y)

x=d['FBS over 120']
y=d['Heart Disease']
pt.plot(x,y)

x=d['EKG results']
y=d['Heart Disease']
pt.plot(x,y)

x=d['Max HR']
y=d['Heart Disease']
pt.plot(x,y)

x=d['Exercise angina']
y=d['Heart Disease']
pt.plot(x,y)

x=d['ST depression']
y=d['Heart Disease']
pt.plot(x,y)

x=d['Slope of ST']
y=d['Heart Disease']
pt.plot(x,y)

x=d['Number of vessels fluro']
y=d['Heart Disease']
pt.plot(x,y)

x=d['Thallium']
y=d['Heart Disease']
pt.plot(x,y)

corr_matrix=d.corr()

import seaborn as sn

import matplotlib.pyplot as plt

sn.heatmap(corr_matrix,annot=True)

cov_matrix=d.cov()

import seaborn as sn
import matplotlib.pyplot as plt
sn.heatmap(cov_matrix,annot=True)

from sklearn.model_selection import train_test_split
from sklearn.datasets import load_iris
data=pd.read_csv('/content/drive/MyDrive/Heart_Disease_Predictionn.csv')
data.head()

y=data.Thallium
x=data.drop('Thallium',axis=1)

x_train,x_test,y_train,y_test=train_test_split(x,y,test_size=0.2)
x_train.head()

x_train.shape

x_test.head()

x_test.shape

from sklearn.linear_model import LogisticRegression

lr=LogisticRegression()

mm=lr.fit(x_train,y_train)

yp=mm.predict(x_test)

print(yp)

x=d.iloc[:,0:7]
y=d.iloc[:,7:8]
print(x)
print(y)

from sklearn.metrics import accuracy_score
print(accuracy_score(yp,y_test))

from sklearn import metrics

confusion_matrix=metrics.confusion_matrix(y_test,yp)

cm_display=metrics.ConfusionMatrixDisplay(confusion_matrix=confusion_matrix,display_labels=[3,2,1])

import matplotlib.pyplot as plt

cm_display.plot()
plt.show()

from sklearn.tree import DecisionTreeClassifier

classifier=DecisionTreeClassifier(criterion='entropy',random_state=0)
mm=classifier.fit(x_train,y_train)

yp=mm.predict(x_test)

print(yp)

from sklearn.metrics import accuracy_score
print(accuracy_score(yp,y_test))

from sklearn import metrics

confusion_matrix=metrics.confusion_matrix(y_test,yp)

cm_display=metrics.ConfusionMatrixDisplay(confusion_matrix=confusion_matrix,display_labels=[3,2,1])

import matplotlib.pyplot as plt

cm_display.plot()
plt.show()

from sklearn.neighbors import KNeighborsClassifier
classifier=KNeighborsClassifier(n_neighbors=5,metric='minkowski',p=2)
classifier.fit(x_train,y_train)

yp=classifier.predict(x_test)

print(yp)

from sklearn.metrics import accuracy_score
print(accuracy_score(yp,y_test))

from sklearn import metrics

confusion_matrix=metrics.confusion_matrix(y_test,yp)

cm_display=metrics.ConfusionMatrixDisplay(confusion_matrix=confusion_matrix,display_labels=[3,2,1])

import matplotlib.pyplot as plt

cm_display.plot()
plt.show()

from sklearn.naive_bayes import GaussianNB
gnb=GaussianNB()
gnb.fit(x_train,y_train)

yp=gnb.predict(x_test)

print(yp)

accuracy=accuracy_score(yp,y_test)

print(accuracy)

from sklearn import metrics

confusion_matrix=metrics.confusion_matrix(y_test,yp)

cm_display=metrics.ConfusionMatrixDisplay(confusion_matrix=confusion_matrix,display_labels=[3,2,1])

import matplotlib.pyplot as plt

cm_display.plot()
plt.show()

from sklearn.svm import SVC

svm_model=SVC(kernel='linear')

svm_model.fit(x_train,y_train)

yp=svm_model.predict(x_test)

print(yp)

accuracy=accuracy_score(yp,y_test)

print(accuracy)

from sklearn import metrics

confusion_matrix=metrics.confusion_matrix(y_test,yp)

cm_display=metrics.ConfusionMatrixDisplay(confusion_matrix=confusion_matrix,display_labels=[3,2,1])

import matplotlib.pyplot as plt

cm_display.plot()
plt.show()

from sklearn.tree import DecisionTreeRegressor
model=DecisionTreeRegressor()
model.fit(x_train,y_train)
y_pred=model.predict(x_test)
print(y_pred)
from sklearn.metrics import mean_squared_error
print(mean_squared_error(y_test,y_pred))
from sklearn import tree
tree.plot_tree(model,filled=True)

from sklearn.neighbors import KNeighborsRegressor 
model=KNeighborsRegressor() 
model.fit(x_train,y_train) 
y_pred=model.predict(x_test) 
print(y_pred)

from sklearn.metrics import mean_squared_error 
print(mean_squared_error(y_test,y_pred))

from sklearn.svm import SVR 
model=SVR() 
model.fit(x_train,y_train) 
y_pred=model.predict(x_test) 
print(y_pred)

from sklearn.metrics import mean_squared_error 
print(mean_squared_error(y_test,y_pred))